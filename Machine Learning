
'''

from sklearn.linear_model import LinearRegression
# Dados de exemplo
X = [[1], [2], [3], [4]]  # entradas
y = [2, 4, 6, 8]          # saídas

# Criar e treinar o modelo
modelo = LinearRegression()
modelo.fit(X, y)

# Fazer previsão
print(modelo.predict([[5]]))


'''

#----------------------------------------------------------------------------------------------------------

"""

from sklearn.datasets import load_diabetes
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# 1. Carregar dataset
X, y = load_diabetes(return_X_y=True)

# 2. Separar treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Treinar modelo
modelo = LinearRegression()
modelo.fit(X_train, y_train)

# 4. Avaliar modelo
y_pred = modelo.predict(X_test)
print("Erro quadrático médio:", mean_squared_error(y_test, y_pred))

"""

#----------------------------------------------------------------------------------------------------------

"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# 1. Carregar dataset
X, y = load_iris(return_X_y=True)

# 2. Separar treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Treinar modelo (classificação)
modelo = LogisticRegression(max_iter=200)
modelo.fit(X_train, y_train)

# 4. Avaliar modelo
y_pred = modelo.predict(X_test)
print("Acurácia:", accuracy_score(y_test, y_pred))

"""

#----------------------------------------------------------------------------------------------------------

"""

import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# 1. Carregar dataset
X, y = load_diabetes(return_X_y=True)

# Para simplificar, usar só 1 feature (coluna 0)
X = X[:, [0]]

# 2. Separar treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Treinar modelo
modelo = LinearRegression()
modelo.fit(X_train, y_train)

# 4. Plotar dados reais (pontos) e linha do modelo
plt.scatter(X_test, y_test, color="blue", label="Dados reais")
plt.plot(X_test, modelo.predict(X_test), color="red", linewidth=2, label="Previsão")
plt.legend()
plt.xlabel("Feature (idade normalizada)")
plt.ylabel("Alvo (medida médica)")
plt.title("Regressão Linear - Diabetes")
plt.show()

"""

#----------------------------------------------------------------------------------------------------------

"""

import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# 1. Carregar dataset
iris = load_iris()
X = iris.data[:, :2]  # pegar apenas 2 features (sépalas)
y = iris.target

# 2. Separar treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Treinar modelo
modelo = LogisticRegression(max_iter=200)
modelo.fit(X_train, y_train)

# 4. Plotar pontos coloridos
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, cmap=plt.cm.Set1, edgecolor="k")
plt.xlabel("Comprimento da sépala")
plt.ylabel("Largura da sépala")
plt.title("Classificação Iris (2 features)")
plt.show()

"""

#----------------------------------------------------------------------------------------------------------

"""

from sklearn.datasets import load_diabetes
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# 1. Carregar dataset
X, y = load_diabetes(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2. Treinar modelo
modelo = LinearRegression()
modelo.fit(X_train, y_train)

# 3. Avaliar com várias métricas
y_pred = modelo.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("R²:", r2_score(y_test, y_pred))

"""

#----------------------------------------------------------------------------------------------------------

"""

from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

# 1. Carregar dataset
X, y = load_iris(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2. Treinar modelo
modelo = LogisticRegression(max_iter=200)
modelo.fit(X_train, y_train)

# 3. Avaliar com várias métricas
y_pred = modelo.predict(X_test)
print("Matriz de Confusão:\n", confusion_matrix(y_test, y_pred))
print("\nRelatório de Classificação:\n", classification_report(y_test, y_pred))

"""

#----------------------------------------------------------------------------------------------------------

#bibliotecas

from sklearn.datasets import load_breast_cancer
from sklearn.linear_model import LogisticRegression #modelo
from sklearn.model_selection import train_test_split #treino e teste
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report #modelos usados para resultados

#1 carregar dataset
X, y = load_breast_cancer(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

#2 treinar modelo
modelo = LogisticRegression()
modelo.fit(X_train, y_train)

#3 acuracia
y_pred = modelo.predict(X_test)
print("\nAcuracia:", accuracy_score(y_test, y_pred))

#Outras metricas
print("\nPrecisao: ", precision_score(y_test, y_pred))
print("\nRecall: ", recall_score(y_test, y_pred))
print("\nF1: ", f1_score(y_test, y_pred))

print("\nMatriz de Confusao: " "\n", confusion_matrix(y_test, y_pred))
print("\nRelatorio de classificação: " "\n", classification_report(y_test, y_pred))




